// В font-size можно записать самый частый размер шрифта на сайте, в font-family - самое частое семейство шрифта.

body {
  font-family: var(--main-font-family);
  color: var(--main-color);
  font-size: rem(18);
  font-weight: 500;
  line-height: 161%;
  background: #ffe6d7;
  // color: $mainColor;
  // overflow-wrap: break-word;
  // word-wrap: break-word;
  // @media (max-width: $tablet) {
  //   font-size: rem(16);
  // }
}

.wrapper {
  overflow: hidden;
  // overflow-x: hidden;
  // overflow-y: auto;
  display: flex;
  flex-direction: column;
  min-height: 100%;
}

/*------------------*/

// Функция возвращает размер шрифта в rem (переводит из пикселей в rem). По умолчанию в браузерах это 16px. В стилях для конкретного текста можно писать font-size: rem(32); Это пример. Тогда в файле css окажется 2rem. 16px - это размер по умолчанию в браузерах. $size пишем без 'px'.
// [class$="-container"] ниже для случаев типа footer__top-container

[class$="__container"],
[class$="-container"] {
  max-width: $maxWidth;
  min-width: $minWidth;
  padding: 0 rem(15);
  margin: 0 auto;
}

.main {
  flex-grow: 1;
}

body._lock {
  overflow: hidden;
}

.button {
  display: flex;
  justify-content: center;
  align-items: center;
  width: fit-content;
  color: var(--white-color);
  line-height: 133%;
  min-height: rem(50);
  min-width: rem(207);
  padding: rem(10) rem(15);
  background: linear-gradient(130deg, #4499d9 0%, #6e6cc1 100%);
  border-radius: rem(25);
  text-align: center;
  user-select: none;
  text-transform: capitalize;
  transition: opacity 0.3s ease;
  // transition:
  //   color 0.3s ease,
  //   background-color 0.3s ease,
  //   border-color 0.3s ease;
  @media (any-hover: hover) and (pointer: fine) {
    &:hover {
      // color: var(--white);
      // background: var(--green);
      // border: 1px solid var(--green);
      opacity: 0.9;
    }
  }
  @media (max-width: $tablet) {
    min-height: rem(45);
  }
}

/*--------- visually-hidden ---------*/

// Класс, который можно использовать для элементов, которые  нужно скрыть, но так, чтобы скринридеры их видели. Например, заголовок, который должен по логике быть, но по дизайн-макету его нет. По скрытым таким способам ссылкам и кнопкам будет при табе происходить фокусировка, что будет не видно.
// При display: none; ни поисковики, ни скринридеды не видят скрытый элемент. Атрибут hidden может заменить display: none;
// Если нужно сделать плавное появление и исчезновение выпадающего меню можно использовать visibility и opacity (hidden и 0). Но при этом нужно, чтобы элемент был спозиционирован абсолютно. Иначе он будет продолжать занимать место в разметке. Поисковики будут видеть элемент, скринридеры - нет.
//Вариант: opacity: 0; pointer-events: none; (и поисковики, и скринридеры видят элемент, элемент занимает место в разметке, как и в варианте выше). Делает то же самое.
// Исчезновение блока можно сделать с помощью спойлера (за счет height: 0;). В этом случае исчезновение/появление анимируется. И скрытый элемент будут видеть и поисковики, и скринридеры. Но в случае с height: auto; height не анимируется. Нужно, чтобы оба значения height были числами. Плюс нужно убирать паддинги и бордеры (при height: 0 они остаются видны).

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;
  white-space: nowrap;
  clip-path: inset(100%);
  clip: rect(0, 0, 0, 0);
  overflow: hidden;
}

/*------------------*/

// Класс none - чтобы временно скрывать блоки во время разработки

.none {
  display: none !important;
}

.logo {
  transition: transform 0.3s ease;
  // .logo__img
  @media (hover: hover) and (pointer: fine) {
    &:hover {
      transform: scale(1.01);
    }
  }
  &__img {
  }
}

.heading {
  font-family: var(--font-family);
  font-weight: 600;
  // font-weight: 700;
  font-size: rem(68);
  // font-size: proadrem(30, 68, $minWidthRemWithout, $maxWidthRemWithout);
  line-height: 110%;
  letter-spacing: rem(-4);
  color: var(--heading-color);
  @media (max-width: $desk) {
    font-size: rem(60);
  }
  @media (max-width: $tablet) {
    font-size: rem(55);
  }
  @media (max-width: $mobile) {
    font-size: rem(50);
  }
  @media (max-width: $mobileMiddle) {
    font-size: rem(45);
  }
  @media (max-width: $mobileSmall) {
    font-size: rem(40);
  }
}

.subtitle {
  font-size: rem(23);
  line-height: 104%;
  color: var(--subtitle-color);
}
